{
  "hash": "53cd8e0a9449c745623fe6340711fd24",
  "result": {
    "markdown": "---\ntitle: \"Example Quarto Document Publishing\"\nsubtitle: \"Accessing CA Water Board & U.S. Census Bureau Data\"\nnumber-sections: true\ntoc: true\ntoc-depth: 4\nformat:\n    html:\n        self-contained: true\nbibliography: references.bib\n---\n\n\n## Background {#sec-background}\n\nThis document is a test. \n\nThis text is added from the `feature-1` branch.\n\nThis project uses the [R programming language](https://www.R-project.org/) [@R] to estimate characteristics of any given 'target' spatial area(s) (e.g., neighborhoods, project boundaries, water supplier service areas, etc.), based on data from a source dataset containing the characteristic data of interest (e.g., census data, CalEnvrioScreen scores, etc.) whose boundaries overlap but don't necessarily align with the target area(s). It also provides some brief background on the various types of data available from the U.S Census Bureau, and links to a few places to find more in-depth information.\n\nThis particular example estimates demographic characteristics of community water systems in the Sacramento County area. It uses the [`tidycensus`](https://walker-data.com/tidycensus/index.html) R package [@tidycensus] to access selected demographic data from the U.S. Census Bureau for census units whose spatial extent covers those water systems' service areas, then uses the [`areal`](https://chris-prener.github.io/areal/) R package [@areal] to estimate some demographic characteristics of each water system based on that census data. It also relies on a number of other R packages, such as the [`tidyverse`](https://www.tidyverse.org/) collection of packages [@tidyverse] for general data management and analysis, and the [`sf`](https://r-spatial.github.io/sf/) package [@sf] for working with spatial data.\n\n## Setup {#sec-setup}\n\nThe code block below loads required packages for this analysis, and sets some user-defined options and defaults.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# packages ----\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(janitor)\nlibrary(here)\n# library(units)\n# library(areal)\nlibrary(Polychrome)\n# library(knitr)\n# library(kableExtra)\n# library(tmap)\n# library(patchwork)\n# library(scales)\n# library(digest)\n\n# options ----\noptions(scipen = 999) # turn off scientific notation\noptions(tigris_use_cache = TRUE) # use data caching for tigris\n\n# reference system ----\ncrs_projected <- 3310 # set a common projected coordinate reference system to be used throughout this analysis - see: https://epsg.io/3310\n```\n:::\n\n\n## Water System Boundaries (Target Data) {#sec-system-boundaries}\n\nIn this section, we'll get the service area boundaries for Community Water Systems within the Sacramento County area. This will serve as the 'target' dataset -- i.e., the set of areas which we'll be estimating the characteristics of. We'll also get a dataset of county boundaries which overlap the water service areas in this study, which will help with accessing the census data and with making maps/visualizations.\n\n### Read Water System Data\n\nThis water system dataset is a subset of the [California Drinking Water System Area Boundaries dataset](https://gispublic.waterboards.ca.gov/portal/home/item.html?id=fbba842bf134497c9d611ad506ec48cc). \n\n\nIn this case, we'll get the water system dataset directly from the online source dataset and apply some filters, using the [`arcgislayers`](https://r.esri.com/arcgislayers/index.html) package [@arcgislayers]. \n\n\nWe'll also transform that dataset into a common coordinate reference system for mapping and analysis (which is defined above in the variable `crs_projected`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load arcgislayers package (see: https://r.esri.com/arcgislayers/index.html)\n# install.packages('pak') # only needed if the pak package is not already installed\n# pak::pkg_install(\"R-ArcGIS/arcgislayers\", dependencies = TRUE)\nlibrary(arcgislayers)\n\n# define link to data source\nurl_feature <- 'https://gispublic.waterboards.ca.gov/portalserver/rest/services/Drinking_Water/California_Drinking_Water_System_Area_Boundaries/FeatureServer/0'\n\n# connect to data source\nwater_systems_feature_layer <- arc_open(url_feature)\n\n# download and filter data from source\nwater_systems_sac <- arc_select(\n  water_systems_feature_layer,\n  # apply filters\n  where = \"COUNTY = 'SACRAMENTO' AND STATE_CLASSIFICATION = 'COMMUNITY'\",\n  # select fields\n  fields = c('WATER_SYSTEM_NAME', 'WATER_SYSTEM_NUMBER', 'GLOBALID',\n             'BOUNDARY_TYPE', 'OWNER_TYPE_CODE', 'COUNTY',\n             'REGULATING_AGENCY', 'FEDERAL_CLASSIFICATION', 'STATE_CLASSIFICATION',\n             'SERVICE_CONNECTIONS', 'POPULATION')) %>%\n    # transform to commont coordinate system\n    st_transform(crs_projected) %>%\n    # rename fields to match names from the shapefile\n    rename(WATER_SY_1 = WATER_SYSTEM_NAME,\n           WATER_SYST = WATER_SYSTEM_NUMBER,\n           BOUNDARY_T = BOUNDARY_TYPE,\n           OWNER_TYPE = OWNER_TYPE_CODE,\n           REGULATING = REGULATING_AGENCY,\n           FEDERAL_CL = FEDERAL_CLASSIFICATION,\n           STATE_CLAS = STATE_CLASSIFICATION,\n           SERVICE_CO = SERVICE_CONNECTIONS)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'jsonify':\n  method     from    \n  print.json jsonlite\n```\n:::\n:::\n\n\nCheck / fix invalid geometry:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!all(st_is_valid(water_systems_sac))) {\n    water_systems_sac <- water_systems_sac %>% st_make_valid()    \n}\n```\n:::\n\n\nWe can use the `glimpse` function (below) to take get a sense of what type of information is available in the water system dataset and how it's structured.\n\nNote that this dataset already includes a `POPULATION` variable that indicates the population served by each water system. However, for this analysis we'll be making our own estimate of the population within each system's service area based on U.S. Census Bureau data and the spatial representation of the system boundaries. I don't know exactly how the `POPULATION` variable was derived in this dataset, and it likely will not exactly match the population estimates from this analysis, but may serve as a useful check to make sure our estimates are reasonable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(water_systems_sac)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 63\nColumns: 12\n$ WATER_SY_1 <chr> \"MC CLELLAN MHP\", \"MAGNOLIA MUTUAL WATER\", \"KORTHS PIRATES …\n$ WATER_SYST <chr> \"CA3400179\", \"CA3400130\", \"CA3400135\", \"CA3400121\", \"CA3400…\n$ GLOBALID   <chr> \"{982BA271-E23C-4128-8587-601DB0C172E7}\", \"{581583DB-9E2E-4…\n$ BOUNDARY_T <chr> \"Water Service Area\", \"Water Service Area\", \"Water Service …\n$ OWNER_TYPE <chr> \"P \", \"P \", \"P \", \"P \", \"P \", \"P \", \"P \", \"P \", \"P \", \"P \",…\n$ COUNTY     <chr> \"SACRAMENTO\", \"SACRAMENTO\", \"SACRAMENTO\", \"SACRAMENTO\", \"SA…\n$ REGULATING <chr> \"LPA64 - SACRAMENTO COUNTY\", \"LPA64 - SACRAMENTO COUNTY\", \"…\n$ FEDERAL_CL <chr> \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUN…\n$ STATE_CLAS <chr> \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUN…\n$ SERVICE_CO <int> 199, 34, 64, 128, 83, 28, 50, 164, 5728, 14863, 115, 33, 11…\n$ POPULATION <int> 700, 90, 55, 318, 210, 28, 100, 350, 16861, 47060, 200, 103…\n$ geometry   <GEOMETRY [m]> POLYGON ((-119809.2 72365, ..., POLYGON ((-137015.…\n```\n:::\n:::\n\n\n### Get County Boundaries {#sec-county-boundaries}\n\nTo determine what data to pull from the U.S. Census Bureau, and to create some maps later, we need to get a dataset of county boundaries. These are available from the [TIGER dataset](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) and can be accessed using the [`tigris`](https://github.com/walkerke/tigris) R package [@tigris].\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounties_ca <- counties(state = 'CA', \n                        cb = TRUE) %>% # simplified\n    st_transform(crs_projected) # transform to common coordinate system\n```\n:::\n\n\nThen, we can get a list of counties that overlap with the boundaries of the Sacramento area community water systems obtained above. This list will be used when getting the census data (below) -- it is needed because there are some systems whose boundaries extend into neighboring counties (or at least have boundaries that intersect the edge of neighboring counties).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounties_list <- st_filter(counties_ca, \n                           water_systems_sac, \n                           .predicate = st_overlaps) %>% \n    pull(NAME)\n```\n:::\n\n\nThe counties in the `counties_list` variable are: Yolo, Placer, San Joaquin, El Dorado, Sacramento.\n\n### Plot Water Systems and County Boundaries {#sec-plot-systems}\n\nAs a check, @fig-sys-bounds plots the water systems (in blue) and the county boundaries (in grey):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make plot\nplot_boundaries <- ggplot() +\n    geom_sf(data = water_systems_sac, \n            fill = alpha('blue', 1),\n            color = 'black', \n            linewidth = 0.1) + \n    geom_sf(data = counties_ca %>% \n                filter(NAME %in% counties_list), \n            fill = NA,\n            color = 'grey', \n            linewidth = 0.5) +\n    theme_void()\n\n# show plot\nplot_boundaries\n```\n\n::: {.cell-output-display}\n![Water Systems and County Boundaries](example_doc_files/figure-html/fig-sys-bounds-1.png){#fig-sys-bounds fig-alt='Map showing water systems in Sacramento county, colored blue, with boundaries for Sacramento County and surrounding counties overlaid on top.' width=672}\n:::\n:::\n\n\n## Census Data (Source Data) {#sec-census-data}\n\nThis section provides some brief background on the various types of data available from the U.S. Census Bureau, and demonstrates how to retrieve data from the U.S. Census Bureau using the [`tidycensus`](https://walker-data.com/tidycensus/index.html) R package. Most of the information covered here comes from the book [Analyzing US Census Data: Methods, Maps, and Models in R](https://walker-data.com/census-r/index.html), which is a great source of information if you'd like more detail about any of the topics below [@walker2023].\n\n### Census Data Overview {#sec-census-overview}\n\n::: callout-note\nIf you're already familiar with Census data and want to skip this overview, go directly to @sec-census-access\n:::\n\nDifferent census products/surveys contain data on different variables, at different geographic scales, over varying periods of time, and with varying levels of certainty. Therefore, there are a number of judgement calls to make when determining which type of census data to use for an analysis -- e.g., which data product to use (Decennial Census or American Community Survey), which geographic scale to use (e.g., Block, Block Group, Tract, etc.), what time frame to use, which variables to assess, etc.\n\nMore detailed information about U.S. Census Bureau's data products and other topics mentioned below is available [here](https://walker-data.com/census-r/the-united-states-census-and-the-r-programming-language.html#the-united-states-census-and-the-r-programming-language).\n\n#### Census Geography / Hierarchy {#sec-census-hierarchy}\n\nData from the U.S. Census Bureau is aggregated to census units which are available at different geographic scales. Some of these units are nested and can be neatly aggregated (e.g., each census tract is composed of a collection of block groups, and each block group is composed of a collection of blocks), while other census units are outside this hierarchy (e.g., Zip Code Tabulation Areas don't coincide with any other census unit). @fig-census-hierarchies shows the relationship of all of the various census units.\n\n![Census Unit Hierarchies](https://walker-data.com/census-r/img/screenshots/census-hierarchies.png){#fig-census-hierarchies}\n\nFor a list of the different geographic units available for each of the different census products/surveys (see @sec-census-datasets) that can be accessed via the `tidycensus` package, go [here](https://walker-data.com/tidycensus/articles/basic-usage.html#geography-in-tidycensus).\n\n#### Census Datasets / Surveys {#sec-census-datasets}\n\nThe Decennial Census is conducted every 10 years, and is intended to provide a complete count of the US population and assist with political redistricting. As a result, it collects a relatively limited set of basic demographic data, but (should) provide a high degree of precision (i.e., in general it should provide exact counts). It is available for geographic units down to the census block (the smallest census unit available -- see @sec-census-hierarchy). For information about existing and planned future releases of 2020 census data products, go [here](https://www.census.gov/programs-surveys/decennial-census/decade/2020/planning-management/release/about-2020-data-products.html).\n\nThe American Community Survey (ACS) provides a much larger array of demographic information than the Decennial Census, and is updated more frequently. The ACS is based on a sample of the population (rather than a count of the entire population, as in the Decennial Census), so it represents estimated values rather than precise counts, therefore each data point is available as an estimate (typically labeled with an 'E' in census variable codes, which are discussed in @sec-census-variables ) along with an associated margin of error (typically labeled with 'MOE' in census variable codes) around its estimated value.\n\nThe ACS is available in two formats. The 5-year ACS is a rolling average of 5 years of data (e.g., the 2021 5-year ACS dataset is an average of the ACS data from 2017 through 2021), and is generally available for geographic units down to the census block group (though some 5-year ACS data may only be available at less granular levels). The 1-year ACS provides data for a single year, and is only available for geographies with population greater than 65,000 (e.g., large cities and counties). Therefore, only the 5-year ACS will be useful for any analysis at a relatively fine scale (e.g., anything that requires data at or more detailed than the census tract level, or any analysis that considers smaller counties/cities -- by definition, census tracts always contain significantly fewer than 65,000 people).\n\nIn addition to the Decennial Census and ACS data, a number of other census data products/surveys are also available. For example, see the `censusapi` R package ([here](https://github.com/hrecht/censusapi) or [here](https://www.hrecht.com/censusapi/index.html)) for access to over 300 census API endpoints. For historical census data, see the discussion [here](https://walker-data.com/census-r/other-census-and-government-data-resources.html?q=API%20endpoint#other-census-and-government-data-resources) on using NHGIS, IPUMS, and the `ipumsr` package.\n\n#### Census Variables / Codes {#sec-census-variables}\n\nEach census product collects data for many different demographic variables, and each variable is generally associated with an identifier code. In order to access census data programmatically, you often need to know the code associated with each variable of interest. When determining which variables to use, you need to consider what census product contains those variables (see @sec-census-datasets) and how they differ in terms of time frame, precision, spatial granularity (see @sec-census-hierarchy), etc.\n\nThe `tidycensus` package offers a convenient generic way to search for variables across different census products using the `load_variables()` function, as described [here](https://walker-data.com/tidycensus/articles/basic-usage.html#searching-for-variables).\n\nThe following websites may also be helpful for exploring the various census data products and finding the variable names and codes they contain:\n\n-   Census Reporter (for ACS data): <https://censusreporter.org/> (especially <https://censusreporter.org/topics/table-codes/>)\n\n-   Census Bureau's list of variable codes, e.g.:\n\n    -   2020 Census codes: <https://api.census.gov/data/2020/dec/pl/variables.html>\n\n    -   2021 ACS 5 year codes: <https://api.census.gov/data/2021/acs/acs5/variables.html>\n\n-   Census Bureau's data interface (for Decennial Census and ACS, and other census datasets): <https://data.census.gov/cedsci/>\n\n-   National Historical Geographic Information System (NHGIS) (for ACS data and historical decennial Census data): <https://www.nhgis.org/>\n\n### Accessing Census Data {#sec-census-access}\n\nThe following sections demonstrate how to retrieve census data from the Decennial Census and the ACS using the [`tidycensus`](https://walker-data.com/tidycensus/index.html) R package.\n\nIn order to use the `tidycensus` R package, you'll need to obtain a personal API from the US Census Bureau (which is free and available to anyone) by signing up here: <http://api.census.gov/data/key_signup.html>. Once you have your API key, you'll need to register it in R by entering the command `census_api_key(key = \"YOUR API KEY\", install = TRUE)` in the console. Note that the `install = TRUE` argument means that the key is saved for all future R sessions, so you'll only need to run that command once on your computer (rather than including it in your scripts). Alternatively, you could save your key to an environment variable and retrieve it using `Sys.getenv()` (to avoid entering your key into any scripts that could potentially be shared).\n\n#### Decennial Census {#sec-census-access-decennial}\n\nThis section retrieves census data from the 2020 U.S. Decennial Census, using the `get_decennial` function from the `tidycensus` package. For this example we're getting data at the 'Block Group' level (with the `geography = 'block group'` argument), for the counties defined above in the `counties_list` variable (with the `county = counties_list` argument). By setting the `geometry = TRUE` argument we'll be able to get the spatial data -- i.e., the boundaries of the census block groups -- along with the tabular data defined in the `variables` argument (see @sec-census-variables for information about how to find variable codes). Also, while by default the `tidycensus` package returns data in long/tidy format, we're getting the data in wide format for this example (by specifying `output = 'wide'`) because it'll be easier to work with for the method described below to estimate demographics for non-census geographies.\n\nNote that, to the extent possible, using census data at the most granular spatial level should provide the best results when estimating demographics for areas whose boundaries don't align with census unit boundaries. However, depending on the use case, it may require too much time and computational resources to use the most granular spatial data, and may not be necessary to obtain a reasonable estimate. As noted above, in general the most granular level of Decennial Census data available is at the 'Block' level (though Decennial Census data may not be available for all data types at the block level, due to data privacy issues), but this example gets data at the 'Block Group' level for speed and simplicity. Data at the 'Block' level may be a better choice for a real-world analysis if possible.\n\nAlso, as a side note, `tidycensus` returns the Census Bureau's [cartographic boundary shapefiles](https://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html) by default (as opposed to the [core TIGER/Line shapefiles](https://www.census.gov/geo/maps-data/data/tiger-line.html)). Those default cartographic boundary shapefiles are pre-clipped to the US coastline, and are smaller/faster to process (alternatively you can use `cb = FALSE` to get the TIGER/Line data) (see [here](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html#better-cartography-with-spatial-overlay)). So the default spatial data returned by `tidycensus` may be somewhat different than the default spatial data returned by the `tigris` package, but in general I find it's best to use the default `tidycensus` spatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get census data\ncensus_data_decennial <- get_decennial(geography = 'block group', # can be 'block', 'block group', 'tract', 'county', etc.\n                                       state = 'CA', \n                                       county = counties_list,\n                                       year = 2020,\n                                       variables = c(\n                                           'pop_hispanic_or_latino' = 'P2_002N', # Total Hispanic or Latino\n                                           'pop_white' = 'P2_005N', # White (Not Hispanic or Latino)\n                                           'pop_black_or_african_american' = 'P2_006N', # Black or African American (Not Hispanic or Latino)\n                                           'pop_native_american_or_alaska_native' = 'P2_007N', # American Indian and Alaska Native (Not Hispanic or Latino)\n                                           'pop_asian' = 'P2_008N', # Asian (Not Hispanic or Latino)\n                                           'pop_pacific_islander' = 'P2_009N', # Native Hawaiian and Other Pacific Islander (Not Hispanic or Latino)\n                                           'pop_other' = 'P2_010N', # Some other race (Not Hispanic or Latino)\n                                           'pop_multiple' = 'P2_011N', # Two or more races (Not Hispanic or Latino)\n                                           'pop_total' = 'P2_001N'\n                                       ),\n                                       output = 'wide', # can be 'wide' or 'tidy'\n                                       geometry = TRUE,\n                                       cache_table = TRUE) \n```\n:::\n\n\nThe output is an sf object (i.e., a dataframe-like object that also includes spatial data), in wide format, where each row represents a census unit, and the population of each racial/ethnic group is reported in a separate column. Here's a view of the contents and structure of the Decennial Census data that's returned:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(census_data_decennial)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,069\nColumns: 12\n$ GEOID                                <chr> \"060770010004\", \"060770031061\", \"…\n$ NAME                                 <chr> \"Block Group 4, Census Tract 10, …\n$ pop_hispanic_or_latino               <dbl> 292, 588, 603, 851, 158, 152, 263…\n$ pop_white                            <dbl> 466, 603, 212, 1178, 801, 935, 18…\n$ pop_black_or_african_american        <dbl> 19, 155, 26, 137, 7, 11, 50, 178,…\n$ pop_native_american_or_alaska_native <dbl> 2, 3, 5, 17, 1, 4, 16, 9, 45, 4, …\n$ pop_asian                            <dbl> 48, 150, 83, 426, 40, 75, 90, 302…\n$ pop_pacific_islander                 <dbl> 1, 6, 1, 7, 0, 5, 4, 41, 2, 6, 3,…\n$ pop_other                            <dbl> 7, 6, 0, 27, 1, 8, 7, 25, 4, 14, …\n$ pop_multiple                         <dbl> 50, 108, 20, 215, 81, 103, 128, 2…\n$ pop_total                            <dbl> 885, 1619, 950, 2858, 1089, 1293,…\n$ geometry                             <MULTIPOLYGON [°]> MULTIPOLYGON (((-121…\n```\n:::\n:::\n\n\n#### American Community Survey (ACS) {#sec-census-access-acs}\n\nTo get data from the ACS, you can use the `get_acs()` function, which is very similar to the `get_decennial()` function used above.\n\nNote that for this dataset we've also included a statement to get median household income data (with the `'med_hh_income' = 'B19013_001E'` statement in the `variables` part of the function).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set year\nacs_year <- 2021\n\n# get census data\ncensus_data_acs <- get_acs(geography = 'block group', \n                           state = 'CA', \n                           county = counties_list,\n                           year = acs_year,\n                           variables = c('pop_total' = 'B01003_001E',\n                                         'pop_hispanic_or_latino' = 'B03002_012E', # Total Hispanic or Latino\n                                         'pop_white' = 'B03002_003E', # White (Not Hispanic or Latino)\n                                         'pop_black_or_african_american' = 'B03002_004E', # Black or African American (Not Hispanic or Latino)\n                                         'pop_native_american_or_alaska_native' = 'B03002_005E', # American Indian and Alaska Native (Not Hispanic or Latino)\n                                         'pop_asian' = 'B03002_006E', # Asian (Not Hispanic or Latino)\n                                         'pop_pacific_islander' = 'B03002_007E', # Native Hawaiian and Other Pacific Islander (Not Hispanic or Latino)\n                                         'pop_other' = 'B03002_008E', # Some other race (Not Hispanic or Latino)\n                                         'pop_multiple' = 'B03002_009E', # Two or more races (Not Hispanic or Latino)\n                                         'med_hh_income' = 'B19013_001E'\n                           ), \n                           output = 'wide', # can be 'wide' or 'tidy'\n                           geometry = TRUE,\n                           cache_table = TRUE)\n```\n:::\n\n\nThe output is an sf object (i.e., a dataframe-like object that also includes spatial data), in wide format, where each row represents a census unit, and the population of each racial/ethnic group, as well as the median household income, is reported in a separate column. Here's a view of the contents and structure of the 2021 5-year ACS data that's returned:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(census_data_acs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,069\nColumns: 23\n$ GEOID                                <chr> \"060670031013\", \"060670050042\", \"…\n$ NAME                                 <chr> \"Block Group 3, Census Tract 31.0…\n$ pop_total                            <dbl> 966, 1569, 776, 1371, 829, 2804, …\n$ B01003_001M                          <dbl> 404, 470, 163, 337, 376, 497, 454…\n$ pop_hispanic_or_latino               <dbl> 566, 150, 523, 269, 79, 348, 764,…\n$ B03002_012M                          <dbl> 387, 166, 163, 197, 89, 147, 350,…\n$ pop_white                            <dbl> 285, 93, 30, 452, 406, 1275, 826,…\n$ B03002_003M                          <dbl> 161, 100, 28, 198, 330, 347, 319,…\n$ pop_black_or_african_american        <dbl> 0, 131, 79, 150, 23, 199, 214, 0,…\n$ B03002_004M                          <dbl> 13, 235, 49, 120, 36, 164, 144, 1…\n$ pop_native_american_or_alaska_native <dbl> 0, 0, 0, 0, 0, 0, 9, 0, 0, 20, 0,…\n$ B03002_005M                          <dbl> 13, 13, 13, 13, 13, 13, 14, 13, 1…\n$ pop_asian                            <dbl> 69, 880, 135, 447, 288, 917, 98, …\n$ B03002_006M                          <dbl> 80, 406, 80, 308, 142, 444, 144, …\n$ pop_pacific_islander                 <dbl> 20, 283, 0, 9, 0, 9, 0, 0, 236, 0…\n$ B03002_007M                          <dbl> 30, 266, 13, 16, 13, 14, 13, 13, …\n$ pop_other                            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ B03002_008M                          <dbl> 13, 13, 13, 13, 13, 13, 13, 13, 1…\n$ pop_multiple                         <dbl> 26, 32, 9, 44, 33, 56, 78, 0, 47,…\n$ B03002_009M                          <dbl> 31, 56, 11, 61, 92, 54, 69, 13, 4…\n$ med_hh_income                        <dbl> 59375, 90915, 16308, 89010, 74956…\n$ B19013_001M                          <dbl> 15177, 20379, 4356, 25760, 32283,…\n$ geometry                             <MULTIPOLYGON [°]> MULTIPOLYGON (((-121…\n```\n:::\n:::\n\n\nNote that the dataset that's returned includes fields corresponding to Margin of Error (MOE) for each variable we've requested (these are the fields that end with two digits and an M -- e.g., \"001M\"), since, as noted above in @sec-census-datasets , the ACS is based on a sample of the population and reports estimated values. Because we won't be incorporating those MOEs into the analysis below, we can drop them for this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus_data_acs <- census_data_acs %>% \n    select(-matches('\\\\d\\\\dM$')) # each \"\\\\d\" matches any single digit, the $ specifies \"ends with\"\n```\n:::\n\n\nHere's a view of the contents and structure of the revised 2021 5-year ACS dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(census_data_acs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,069\nColumns: 13\n$ GEOID                                <chr> \"060670031013\", \"060670050042\", \"…\n$ NAME                                 <chr> \"Block Group 3, Census Tract 31.0…\n$ pop_total                            <dbl> 966, 1569, 776, 1371, 829, 2804, …\n$ pop_hispanic_or_latino               <dbl> 566, 150, 523, 269, 79, 348, 764,…\n$ pop_white                            <dbl> 285, 93, 30, 452, 406, 1275, 826,…\n$ pop_black_or_african_american        <dbl> 0, 131, 79, 150, 23, 199, 214, 0,…\n$ pop_native_american_or_alaska_native <dbl> 0, 0, 0, 0, 0, 0, 9, 0, 0, 20, 0,…\n$ pop_asian                            <dbl> 69, 880, 135, 447, 288, 917, 98, …\n$ pop_pacific_islander                 <dbl> 20, 283, 0, 9, 0, 9, 0, 0, 236, 0…\n$ pop_other                            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ pop_multiple                         <dbl> 26, 32, 9, 44, 33, 56, 78, 0, 47,…\n$ med_hh_income                        <dbl> 59375, 90915, 16308, 89010, 74956…\n$ geometry                             <MULTIPOLYGON [°]> MULTIPOLYGON (((-121…\n```\n:::\n:::\n\n\n#### Plot Results {#sec-census-plot}\n\n@fig-suppliers-census-map shows the datasets that we'll use below to compute water system demographics (zoomed in to the area around the water systems in this study). Each water system -- the target dataset -- is shown with a different (randomly chosen) color. The boundaries of the census data -- the source dataset -- are shown in red; in this case we'll use the 2021 5-year ACS dataset. County boundaries are shown in grey (Sacramento county is show with a bold grey line).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the map boundaries, using the boundaries of the water suppliers and the \n# Sacramento county boundary\nbounds_map <- counties_ca %>% \n    filter(NAME == 'Sacramento') %>% \n    st_union(water_systems_sac) %>% \n    st_buffer(100) %>% \n    st_bbox()\n\n# make a color palette with a distinct (random) color for supplier \nset.seed(12345)\npal <- createPalette(nrow(water_systems_sac),\n                     c(\"#FF0000\", \"#00FF00\", \"#0000FF\"),\n                     range = c(30, 80))\n\n# make the plot\nplot_census <- ggplot() +\n    geom_sf(data = water_systems_sac,\n            aes(fill = WATER_SYST, alpha = 0.8),\n            # fill = alpha('blue', 0.8),\n            color = 'black', \n            linewidth = 0.1,\n            show.legend = FALSE) +\n    scale_fill_manual(values = unname(pal)) +\n    geom_sf(data = census_data_acs %>% \n                st_transform(crs_projected),\n            fill = NA,\n            color = alpha('red', 1),\n            linewidth = 0.1) +\n    geom_sf(data = counties_ca %>%\n                filter(NAME %in% counties_list),\n            fill = NA,\n            color = 'grey',\n            linewidth = 0.5) +\n    geom_sf(data = counties_ca %>%\n                filter(NAME == 'Sacramento'),\n            fill = NA,\n            color = 'darkgrey',\n            linewidth = 1) + # bold line for Sacramento County\n    coord_sf(xlim = c(bounds_map$xmin, bounds_map$xmax), \n             ylim = c(bounds_map$ymin, bounds_map$ymax)) +\n    theme_void()\n\n# show the plot\nplot_census\n```\n\n::: {.cell-output-display}\n![Water systems (filled polygons) and boundaries of census units (red) that will be used to estimate water system demographics, along with county boundaries (grey) for reference.](example_doc_files/figure-html/fig-suppliers-census-map-1.png){#fig-suppliers-census-map width=672}\n:::\n:::",
    "supporting": [
      "example_doc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}